View(my_data)
tail(my_data)
setwd("D:/R/Static Analysis")
x <- read.csv("x.csv")
View(x)
View(x)
getwd()
x <- read.csv("x.csv")
Analyse <- read.csv("Response Times Over Time.csv")
View(Analyse)
StressTest <- read.csv("Response Latency over Time.csv")
StressTest <- read.csv("Response Latencies over Time.csv")
View(StressTest)
print(Test)
Test <- read.csv("x.csv")
print(Test)
View(x)
View(x)
View(x)
is.data.frame(Test)
print(data$HTTP.Request)
print(data$HTTP)
print(Analyse)
print(Test$HTTP)
print(Test$HTTP.Request)
print(d)
d <- subset(Test,HTTP.Request == 46.0)
print(d)
apply(Test, MRGIN=2, FUN=mean)
apply(Test, MARGIN=2, FUN=mean)
apply(Test, MARGIN = 2, FUN = mean)
help(mean)
?mean
summary(Test)
summary(Analyse)
summary(StressTest)
table(Test)
length(Test)
table(Test)/length(Test)
mean(Test)
mean(Test, trim=0.10)
mean(Analyse)
median(Test)
median(Test,HTTP.Response)
median(Test$HTTP.Response)
mean(Test$HTTP.Response)
median(Test$HTTP)
mean(Test$HTTP)
mean(HTTP)
mean(HTTP.Response)
c <- subset(Test,HTTP.Request)
c <- subset(Test,HTTP.Request !=0)
c <- subset(Test,HTTP.Request != 0)
print(c)
d <- subset(Test,HTTP.Request == 46.0)
print(d)
mean(c)
c <- subset(Test,HTTP.Request != 0)
print(c)
mean(c)
View(Test)
mean(Test)
summary(Test)
mean(Test)
summary(HTTP)
summary(HTTP.Response)
summary(Test$HTTP.Response)
A=(1:20)
print(A)
mean(A)
median(A)
sum(A)
Sum(A)/length(A)
sum(A)/20
B <- sum(A)
B/length(A)
C <- length(A)
B/C
Sum(A)/C
sum(A)/C
#Error occur
sum(A)/length(A)
var(A)
sq(A)
sd(A)
sqrt(var(A))
sqrt(var(A))^2
min(A)
range(A)
quantitle(A)
quantitle(A probs=0.90)
quantitle(A, probs=0/90)
quantitle(A, probs=0.90)
quantile(A, probs=0.90)
quantile(A, probs=c(0.10, 0.2, 0.5, 0.9, 1))
cor(A)
sumary(A)
summary(A)
x <- c(2,4,6,7,9,34,56,78,34,546,56)
mode(x)
sort(x)
mode <- function(x)
ux <- unique(x)
ux[which.max(tabulate(match(x.ux)))]
mostrepeated<- Mode(x)
mostrepeated<- mode(x)
Mode <- function(x){
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
ux <- unique(x)
Mode <- function(x){
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
Mode(x)
mode <- function(x){
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
mode(x)
mode(x)
Mode(x)
